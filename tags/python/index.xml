<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>python on Nikita TÜRKMEN</title>
    <link>https://nikitaturkmen.com/tags/python/</link>
    <description>Recent content in python on Nikita TÜRKMEN</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 25 Jan 2023 18:00:00 +0300</lastBuildDate><atom:link href="https://nikitaturkmen.com/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Fonksiyonlar</title>
      <link>https://nikitaturkmen.com/python-egitim/fonksiyonlar/</link>
      <pubDate>Wed, 25 Jan 2023 18:00:00 +0300</pubDate>
      
      <guid>https://nikitaturkmen.com/python-egitim/fonksiyonlar/</guid>
      <description>Fonksiyonlar en işlevsel yapılardan biridir. Şimdiye kadar kullandığımız print, type, len gibi yapıların tamamı fonksiyondu. Aynı şekilde biz kendi fonksiyonlarımızıda yaratabiliriz. Fonksiyonlara, kod tekrarını önlemek ve kompleks olan kodları parçalara bölmek için ihtiyacımız vardır.
Fonksiyon çağrıları yaparken argüman ve parametreler kullanırız. Teknik olarak ikiside aynı şeydir ve sık sık birbirine karıştırılır.
Fonksiyon yaratırken parametreleri kullanırız. Fonksiyon çağrıları yaparken argümanları kullanırız. Fonksiyonlar her python nesnesi olduğu gibi bir nesnedir. Fonksiyonların durum, kod ve parametreleri vardır.</description>
    </item>
    
    <item>
      <title>İterasyon ve İteratörler</title>
      <link>https://nikitaturkmen.com/python-egitim/iterasyon_iterator/</link>
      <pubDate>Tue, 24 Jan 2023 18:00:00 +0300</pubDate>
      
      <guid>https://nikitaturkmen.com/python-egitim/iterasyon_iterator/</guid>
      <description>İterasyon yapisini bir veri yapısından her seferinde bir eleman alarak işlem yapmak için kullanırız.
Sequence veri tipleri itere edilebilir. (list, tuple, string) index sırasına göre. Sözlük veri tipi itere edilebilir. (ekleme sırasına göre.) Set veri tipi itere edilebilir. (sırasız) İterasyonda genel yapı tüm elemanlar bitene kadar bir eleman istenir.
Bu durumda iki konsepten bahsedebiliriz. itere edilebilir ve iteratör.
-itere edilebilir veri koleksiyonu olan nesnelerdir. (list, tuple, string, sözlük, set) -iteratör ise bir nesnenin içindeki elemanları tek tek dolaşmak için kullanılan nesnedir.</description>
    </item>
    
    <item>
      <title>Hata Yakalama</title>
      <link>https://nikitaturkmen.com/python-egitim/hata_yakalama/</link>
      <pubDate>Mon, 23 Jan 2023 18:00:00 +0300</pubDate>
      
      <guid>https://nikitaturkmen.com/python-egitim/hata_yakalama/</guid>
      <description>Yazılım dillerinde hatalar özel yapılardır. Kodumuz beklenmedik bir şekilde çalıştığında hata mesajı alırız. Ancak her zaman beklenmedik durumlar olmaz. Bazende hataların olacağını biliriz ve programımızın çökmemesi için hata mesajlarını yakalar ve programımızı devam ettiririz.
Terminoloji exception : Python&amp;rsquo;da hatalar için kullanılan özel bir objedir. raising : Hata oluşturmak için kullanılan özel bir ifadedir. exception handling : Hata yakalama işlemidir. unhandled exception : Kodumuz tarafından yakalanmayan hatalardır, programımız python tarafından sonlandırılır. Hataların Hiyerarşisi Pythonda oluşan hataların bir hiyerarşisi vardır.</description>
    </item>
    
    <item>
      <title>Comprehensionlar</title>
      <link>https://nikitaturkmen.com/python-egitim/comprehensionlar/</link>
      <pubDate>Sun, 22 Jan 2023 18:00:00 +0300</pubDate>
      
      <guid>https://nikitaturkmen.com/python-egitim/comprehensionlar/</guid>
      <description>Comprehensionlar pythonda listeleri, sözlükleri ve setleri döngü kullanarak basitçe oluşturmak için kullanılan bir yöntemdir. Kullanımı döngü kullanımına çok benzer.
Basit veriler için çok kullanışlıdır ancak karmaşa arttıkça kodun okunabilirliği aniden azalır. Dikkatli olmak gerekir. Unutmayalım ki kısa kodlar yazmak her zaman iyi bir şey değildir. Kodumuzun okunabilirliği bizim için her zaman birinci sıradadır.
Listelerde Comprehension Elimizde bir sayı demeti (tuple) olsun ve biz bu sayıların karelerinden oluşan bir liste oluşturmak istesek.</description>
    </item>
    
    <item>
      <title>Setler</title>
      <link>https://nikitaturkmen.com/python-egitim/setler/</link>
      <pubDate>Sat, 21 Jan 2023 18:00:00 +0300</pubDate>
      
      <guid>https://nikitaturkmen.com/python-egitim/setler/</guid>
      <description>Setler, matematikteki kümelere benzerdirler. Sekans veri tipleri gibi veri koleksiyonları tutarlar. Setlerde sıralama yoktur. Setlerde tekrar eden elemanlar olmaz. Her eleman benzersizdir. Setler döngülerde kullanılabilir. Ancak sıralama olmadığı için sırasızdır. Setlerin tipi set&amp;lsquo;dir. Setlerin içindeki elemanlar hashlenebilir olmalıdır. Setler değiştirilebilirdir (mutable). Dolayısıyla setlerin kendisi hashlenemezler. Setlerin içinde set kullanılmak isteniyorsa frozenset kullanılmalıdır. Çünkü frozenset hashlenebilir bir veri tipidir. Konumuz değil ancak isterseniz araştırabilirsiniz.
Setler, matematikteki kümelerin fonksiyonlarına sahiptirler. Bunlar:</description>
    </item>
    
    <item>
      <title>Sözlükler</title>
      <link>https://nikitaturkmen.com/python-egitim/sozlukler/</link>
      <pubDate>Fri, 20 Jan 2023 18:00:00 +0300</pubDate>
      
      <guid>https://nikitaturkmen.com/python-egitim/sozlukler/</guid>
      <description>Sözlükler pythonda en önemli veri yapılarından birisidir. Ancak objeler bile aslında sözlüktür. Objelerin özellikleri ve metodları sözlüklerle objeye ilişkilendirilirler. Görmesek bile aslında python kodu yazarken her zaman sözlüklerle çalışıyoruz.
Kullanıma uygun birkaç örnek vermek gerekirse;
Bir telefon rehberi düşünün telefon ve kime ait olduğu tutulur, DNS servisinin çalışma biçimine bakıldığında web adresi ve IP adresi ilişkisi vardır, Okuduğumuz bir kitabın içindekiler bölümünde sayfa numaraları ile konular ilişkilidir. İşte tüm bu uygulamalar sözlükler sayesinde gerçekleştirilir.</description>
    </item>
    
    <item>
      <title>Döngüler</title>
      <link>https://nikitaturkmen.com/python-egitim/donguler/</link>
      <pubDate>Thu, 05 Jan 2023 18:00:00 +0300</pubDate>
      
      <guid>https://nikitaturkmen.com/python-egitim/donguler/</guid>
      <description>Döngüler en çok kullanılan yapılardan biridir. Döngüleri bir kodu tekrar tekrar yazmadan tekrar etmek için kullanırız. İki çeşit döngü vardır.
Sonlu döngüler, belirli bir sayıda tekrar etmek için kullanılır. Sonsuz döngüler, bir koşul sağlandığı sürece tekrar etmek için kullanılır. Dolayısıyla burada karar yapısıyla birlikte bir kullanım var. Bu iki çeşit için pythonda deterministik olanlar için for döngüsünü, deterministik olmayanlar içinde while döngüsünü kullanırız.
Range Fonksiyonu range tekrarlanabilir bir objedir. Talep ettikçe size bir sayı verir.</description>
    </item>
    
    <item>
      <title>Stringler</title>
      <link>https://nikitaturkmen.com/python-egitim/stringler/</link>
      <pubDate>Wed, 04 Jan 2023 18:00:00 +0300</pubDate>
      
      <guid>https://nikitaturkmen.com/python-egitim/stringler/</guid>
      <description>Stringlerin sekans veri yapısı olduğunu görmüştük. Öncelikle stringler homojenik veri yapısına sahip yani stringlerin her bir elemanı bir karakterdir. Özel bir veri yapısı olduğu için özel metodları mevcuttur. Başlangıçta sadece ASCII karakterleri desteklenmekteydi. ASCII karakterleri 128 karakterden oluşmaktadır, bu karakterlerden 95 tanesi print edilebilir, 33 tanesi ise print edilemez. ASCII karakterlerinin hepsi 8 bitlik bir sayısal değere sahiptir. Bu sayısal değerlerin hepsi 0 ile 255 arasındadır. ASCII karakterlerinin sayısal değerlerini görmek için aşağıdaki tabloyu kullanabilirsiniz.</description>
    </item>
    
    <item>
      <title>Sekans Veri Tipleri - 3</title>
      <link>https://nikitaturkmen.com/python-egitim/sekans_veri_tipleri_3/</link>
      <pubDate>Tue, 03 Jan 2023 18:00:00 +0300</pubDate>
      
      <guid>https://nikitaturkmen.com/python-egitim/sekans_veri_tipleri_3/</guid>
      <description>Manipülasyon Değiştirilebilir(mutable) olan veri tipleri manipüle edilebilir. Listeler bu tipe oldukça güzel bir örnektir. Listelerde bir elemanı değiştirebilir, silebilir veya ekleyebilirsiniz. Genelde en çok eleman ekleme (append) işlemi yapılır.
Bir Elemanı İndex Numarasına Göre Değiştirme En çok kullanılan yöntemdir. [index] ile elemanı seçebildiğimiz gibi değiştirebiliyoruzda aynı şekilde.
# Tek bir elemanı index numarası ile değiştirebiliriz # Örneğin, 3. elemanı değiştirelim liste = [1, 2, 3, 4, 5] liste[2] = 10 print(liste) [1, 2, 10, 4, 5] Slice İle Birden Fazla Elamanı Değiştirme Çok kullanılan bir yöntem olmasada bazen ihtiyaç duyulabilir eğer belli bir aralıkta elemanları değiştirmek istiyorsanız bunu yapabilirsiniz.</description>
    </item>
    
    <item>
      <title>Sekans Veri Tipleri - 2</title>
      <link>https://nikitaturkmen.com/python-egitim/sekans_veri_tipleri_2/</link>
      <pubDate>Mon, 02 Jan 2023 18:00:00 +0300</pubDate>
      
      <guid>https://nikitaturkmen.com/python-egitim/sekans_veri_tipleri_2/</guid>
      <description>Slicing (Dilimleme) Slicing, sekans veri tiplerinden belli bir aralıktaki verileri almaya arar. Daha önce list, tuple ve stringlerden ve bu sekans veri tiplerinin elemanlarına index numarası ile erişebildiğimizden bahsetmiştik. Bu erişim tek bir eleman için geçerliydi. Slicing ile ise bir aralıkta bulunan elemanlara erişebiliriz. Slicing işleminde kullanılan ifadeyi dilimleme ifadesi olarak da adlandırabiliriz.
Slicing başlangıç indexi dahil, bitiş indexi hariçtir. [başlangıç:bitiş] şeklinde kullanılır. # Bir liste üzerinden örneklerle açıklayalım # Bir liste oluşturalım liste = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] # Listedeki bir elemana index ile erişebiliyorduk liste[0] gibi # slice işlemi ile de bir alt liste oluşturabiliriz # liste[0:3] 0.</description>
    </item>
    
    <item>
      <title>Sekans Veri Tipleri - 1</title>
      <link>https://nikitaturkmen.com/python-egitim/sekans_veri_tipleri/</link>
      <pubDate>Sun, 01 Jan 2023 18:00:00 +0300</pubDate>
      
      <guid>https://nikitaturkmen.com/python-egitim/sekans_veri_tipleri/</guid>
      <description>Sekanslar sıralı obje koleksiyonlarıdır. Birden fazla birbiri ile bağlantılı verileri sıralı olarak tutmaya ihtiyaç duyarız. Bu verilerin sıralanmaya ihtiyacı vardır. Bu sıraya index adı verilir. Pythonda index 0 dan sayılmaya başlar.
Bu durumda n elemanlı bir sekans için;
ilk eleman 0 indexine sahiptir. ikinci eleman 1 indexine sahiptir. son eleman n-1 indexine sahiptir. Bu sekans veri tipleri homojen veya heterojen yapıda olabilir. Homojen yapıda olması için aynı veri tiplerinden bir sekans oluşturulmalıdır.</description>
    </item>
    
    <item>
      <title>Karar Yapıları</title>
      <link>https://nikitaturkmen.com/python-egitim/karar_yapilari/</link>
      <pubDate>Sat, 31 Dec 2022 18:00:00 +0300</pubDate>
      
      <guid>https://nikitaturkmen.com/python-egitim/karar_yapilari/</guid>
      <description>Karar yapıları programlamanın temel yapı taşlarından birisidir. Yazdığımız kodlarda bazen duruma göre sonuç üretmemiz gerekebiliyor. İşte bu anlarda kullanacağımız yapı karar yapılarıdır. Örneğin yazacağımız uygulamamızda üyelere özel bir alan olsun. Bu alana kimlerin erişip kimlerin erişemeyeceğine karar vermemiz gerekecektir bu noktada bu yapıyı kullanabiliyoruz. Neredeyse tüm programlama dillerinde if else elif şeklindedir bu yapılar.
if kullanıcı doğru bilgileri girdiyse sisteme girmesine izin ver else bilgilerde yanlışlık varsa sisteme girmesine izin verme ve hata mesajı göster.</description>
    </item>
    
    <item>
      <title>Temel Python&#39;a Giriş - 3</title>
      <link>https://nikitaturkmen.com/python-egitim/temel_python_3/</link>
      <pubDate>Fri, 30 Dec 2022 18:00:00 +0300</pubDate>
      
      <guid>https://nikitaturkmen.com/python-egitim/temel_python_3/</guid>
      <description>Karşılaştırma Operatörleri Eşitlik operatörü == iki nesneyi karşılaştırır ve eşitse True değilse False cevabını verir. İşlem sırasında python __eq__ fonksiyonunu çağırır ve işlemi bu fonksiyonun sonucuna göre yapar.
10 == 10 &amp;gt; 10.__eq__(10) fonksiyonu çağırılır ve sonuç True döner. 10 == 20 sonucu False olur. Eşit değil operatörü != iki nesneyi karşılaştırır ve eşit değilse True eşitse False cevabını verir. İşlem sırasında python __ne__ fonksiyonunu çağırır ve işlemi bu fonksiyonun sonucuna göre yapar.</description>
    </item>
    
    <item>
      <title>Temel Python&#39;a Giriş - 2</title>
      <link>https://nikitaturkmen.com/python-egitim/temel_python_2/</link>
      <pubDate>Thu, 29 Dec 2022 18:00:00 +0300</pubDate>
      
      <guid>https://nikitaturkmen.com/python-egitim/temel_python_2/</guid>
      <description>Değişkenler Oluşturduğumuz nesneleri ne için kullandığımızı anlamak için değişkenlere ihtiyacımız vardır. Örneğin bir_sayi değişkenine bir sayı atamak için = operatörünü kullanırız.
bir_sayi = 5 hesap_bakiyem = 1000.50 Artık bir_sayi etiketine sahip bir int nesnesine sahip olduk ve 5 değerini verdik. Bu nesneyi kullanmak için bir_sayi etiketini kullanabiliriz. Ekrana yazdıralım.
print(bir_sayi) 5 Atadığımız bu etiketleri aslında nesnenin kendisi değildir, nesneyi bulmamızı sağlayan referans numarasıdır. Nesnenin kendisi bellekteki bir yerde saklanır.
# Değişkenler tüm veri tiplerini tutabilir bir_sayi = 5 bir_ondalikli_sayi = 5.</description>
    </item>
    
    <item>
      <title>Temel Python&#39;a Giriş - 1</title>
      <link>https://nikitaturkmen.com/python-egitim/temel_python/</link>
      <pubDate>Wed, 28 Dec 2022 18:00:00 +0300</pubDate>
      
      <guid>https://nikitaturkmen.com/python-egitim/temel_python/</guid>
      <description>Bu bölümde temel python kod eğitimine başlıyoruz.
Bölüm kapsamında odaklanacağımız konular;
Temel python veri tipleri int, float, boolean Nesne kavramına giriş Temel operatörler ile işlemler +, -, *, /, **, %, // Temel karşılaştırma operatörleri ==, !=, &amp;gt;, &amp;lt;, &amp;gt;=, &amp;lt;= Temel mantıksal operatörler and, or, not Temel operatör öncelikleri Bu eğitim mühendislik öğrencileri için hazırlanmaktadır. Temel seviyede bilgisayar bilimi bilgisi gerekmektedir!
Temel Veri Tipleri Yazılım dillerinde verilerin her zaman bir tipi olmak zorundadır.</description>
    </item>
    
    <item>
      <title>Python Geliştirme Ortamı: VsCode</title>
      <link>https://nikitaturkmen.com/python-egitim/python_idesi_vscode/</link>
      <pubDate>Tue, 27 Dec 2022 18:00:00 +0300</pubDate>
      
      <guid>https://nikitaturkmen.com/python-egitim/python_idesi_vscode/</guid>
      <description>Python Geliştirme Ortamı: VsCode VsCode, ücretsiz ve açık kaynak kodlu bir çoklu platform kod editörüdür. Electron ile geliştirildiği için hemen hemen her işletim sisteminde problemsiz kullanılabilmektedir(Windows, Linux, Mac, Arm). Bu kod editörü microsoft tarafından geliştirilmektedir. Kaynak koduna buradan ulaşabilirsiniz.
VsCode ilk kurulumda temel özellikler ile gelir. Kullandığınız teknolojilere göre eklentiler yükleyerek kişiselleştirmenize olanak tanır. Bu eklentileri, eklentiler üzerinden indirebilirsiniz.
Eğer birçok programlama dili veya aracı kullanıyorsanız VsCode sizin içinde en iyi tercihlerden birisi olacaktır.</description>
    </item>
    
    <item>
      <title>Python Kodları Nasıl Çalışır?</title>
      <link>https://nikitaturkmen.com/python-egitim/python_nasil_calisir/</link>
      <pubDate>Mon, 26 Dec 2022 18:00:00 +0300</pubDate>
      
      <guid>https://nikitaturkmen.com/python-egitim/python_nasil_calisir/</guid>
      <description>Python Kodları Nasıl Çalışır? Python kaynak kodu sadece bir metin dosyasıdır. Python kodları hem derlenmekte hemde yorumlanmaktadır.
Python kodları iki şekilde çalışmaktadır.
İnteraktif mod Script modu Daha önceki yazımızda sanal ortamdan bahsetmiştik, Bu iki mod içinde sanal ortam kullanımı aynı şekildedir. Sanal ortamınızı ister venv ister pipenv ile oluşturup aktif ettikten sonra interaktif veya script modunda python kodlarınızı çalıştırabilirsiniz.
İnteraktif Mod Python kodlarını çalıştırmak için bir terminal açıp python yazıp enter tuşuna basmanız yeterlidir.</description>
    </item>
    
    <item>
      <title>pip İle Paket Kurulumu ve Pipenv Kullanımı</title>
      <link>https://nikitaturkmen.com/python-egitim/pip_pipenv_kurulumu/</link>
      <pubDate>Sun, 25 Dec 2022 11:00:00 +0300</pubDate>
      
      <guid>https://nikitaturkmen.com/python-egitim/pip_pipenv_kurulumu/</guid>
      <description>Pip ile Paket Kurulumu Python standart kütüphaneleri en temel paketlerdir. Bu paketlerin dışındaki paketleri kurmak için pip paket yöneticisini kullanırız. Python kurulumu ile birlikte pip de kurulur. pip ile paket kurulumu için pip install komutunu kullanırız.
Örneğin web sitelerine giriş yaparak bir sayfanın içeriğini almak istiyorsunuz. Bunun için bir kütüphane kurmanız gerekiyor. requests paketini kullanalım, terminal açarak aşağıdaki komutu girin.
pip install requests Bu paketi sanal ortamda kurmak için önce sanal ortamı aktif etmeniz gerekmektedir.</description>
    </item>
    
    <item>
      <title>Python&#39;a Giriş</title>
      <link>https://nikitaturkmen.com/python-egitim/pythona_giris/</link>
      <pubDate>Sun, 25 Dec 2022 10:00:00 +0300</pubDate>
      
      <guid>https://nikitaturkmen.com/python-egitim/pythona_giris/</guid>
      <description>Python Nedir ? Python, Guido van Rossum tarafından 1989 yılında geliştirilmeye başlanmış bir yazılım dilidir. Günümüzde &amp;ldquo;Core Developer&amp;rdquo; olarak adlandırılan geliştiriciler tarafından geliştirilmeye devam etmektedir. Bu eğitimde Python 3.11 sürümü kullanılmıştır.
Günümüzde Popüler Kullanım Alanları
Web Geliştirme (Django, Flask, FastAPI) Oyun Geliştirme (Pygame, Pyglet) Grafiksel Kullanıcı Arayüzü (PyQt, PySide, Kivy) Bilgisayarlı Görü (OpenCV, Scikit-Image) Elektronik (MicroPython) Veri Bilimi ve Makine Öğrenmesi Başlıca popüler kullanım alanlarını bu şekilde sıralayabiliriz.
Python Implementasyonları Python temelde c programlama dili ile geliştirilmektedir ve birçok implementasyonu vardır.</description>
    </item>
    
  </channel>
</rss>
